{"version":3,"sources":["components/Header.js","components/Footer.js","components/Note.js","components/CreateArea.js","App.js","index.js"],"names":["Header","Footer","Date","getFullYear","Note","props","className","title","content","onClick","onDelete","id","CreateArea","input","setInput","useState","handleChange","event","name","value","target","prevValue","onSubmit","onAdd","preventDefault","onChange","placeholder","rows","error","style","color","type","App","setError","notes","setNotes","useEffect","getNotes","JSON","parse","localStorage","getItem","setItem","stringify","deleteNote","prevNotes","window","confirm","filter","note","index","length","console","log","map","ReactDOM","render","document","getElementById"],"mappings":"uJAUeA,MARf,WACE,OACE,iCACE,2CCMSC,MATf,WAEE,OACE,iCACE,mDAAgB,IAAIC,MAAOC,oBCalBC,MAjBf,SAAcC,GACZ,OACE,sBAAKC,UAAU,OAAf,UACE,6BAAKD,EAAME,QACX,4BAAIF,EAAMG,UACV,wBAEEC,QAAS,KACPJ,EAAMK,SAASL,EAAMM,KAHzB,mBC6CSC,MAlDKP,IAElB,MAAOQ,EAAOC,GAAYC,mBAAS,CACjCR,MAAO,GACPC,QAAS,KAILQ,EAAgBC,IAEpB,MAAM,KAAEC,EAAF,MAAQC,GAAUF,EAAMG,OAE9BN,GAAUO,IACD,IACFA,EACH,CAACH,GAAOC,OAKd,OACE,8BACE,uBACEG,SAAWL,IAETZ,EAAMkB,MAAMV,GACZI,EAAMO,iBACNV,EAAS,CAAEP,MAAO,GAAIC,QAAS,MALnC,UAQE,uBACEiB,SAAUT,EACVE,KAAK,QACLQ,YAAY,QACZP,MAAON,EAAMN,QAEf,0BACEkB,SAAUT,EACVE,KAAK,UACLQ,YAAY,iBACZC,KAAK,IACLR,MAAON,EAAML,UAEdH,EAAMuB,OAAS,uBAAOC,MAAO,CAAEC,MAAO,OAAvB,SAAiCzB,EAAMuB,QACvD,wBAAQG,KAAK,SAAb,uBC4BOC,MApEH,KAEV,MAAOJ,EAAOK,GAAYlB,mBAAS,OAE5BmB,EAAOC,GAAYpB,mBAAS,IAGnCqB,qBAAU,KACR,MAAMC,EAAWC,KAAKC,MAAMC,aAAaC,QAAQ,UAE7CJ,GACFF,EAASE,KAEV,IAGHD,qBAAU,KACRI,aAAaE,QAAQ,QAASJ,KAAKK,UAAUT,MAC5C,CAACA,IAGJ,MAaMU,EAAcjC,GACXwB,GAAUU,IACf,GAAIC,OAAOC,QAAQ,gDACjB,OAAOF,EAAUG,QAAO,CAACC,EAAMC,IACtBA,IAAUvC,OAMzB,OACE,gCACE,cAAC,EAAD,IACA,cAAC,EAAD,CAAYY,MA1BCV,IACf,GAAIA,EAAMN,MAAM4C,OAAS,GAAKtC,EAAML,QAAQ2C,OAAS,EAEnD,OADAlB,EAAS,4DACF,EAETE,GAAUU,GACD,CAAChC,KAAUgC,KAEpBZ,EAAS,MACTmB,QAAQC,IAAIxC,IAiBkBe,MAAOA,IAIjCM,EAAMoB,KAAI,CAACL,EAAMC,IAEb,cAAC,EAAD,CAEEvC,GAAIuC,EACJ3C,MAAO0C,EAAK1C,MACZC,QAASyC,EAAKzC,QACdE,SAAUkC,GAJLM,KASb,cAAC,EAAD,QCjENK,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.ea20ace9.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Header() {\n  return (\n    <header>\n      <h1>Keeper</h1>\n    </header>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\n\nfunction Footer() {\n  // const year = new Date().getFullYear();\n  return (\n    <footer>\n      <p>Copyright â“’ {new Date().getFullYear()}</p>\n    </footer>\n  );\n}\n\nexport default Footer;\n","import React from \"react\";\n\nfunction Note(props) {\n  return (\n    <div className=\"note\">\n      <h1>{props.title}</h1>\n      <p>{props.content}</p>\n      <button\n        // getting props and passing \"id\" to the \"onDelete\" function:\n        onClick={() => {\n          props.onDelete(props.id);\n        }}\n      >\n        X\n      </button>\n    </div>\n  );\n}\n\nexport default Note;\n","import React, { useState } from \"react\";\n\nconst CreateArea = (props) => {\n  // creating \"state\" to save input:\n  const [input, setInput] = useState({\n    title: \"\",\n    content: \"\",\n  });\n\n  //creating a function to get hold of the input value:\n  const handleChange = (event) => {\n    //destructuring event.target.value into an Object:\n    const { name, value } = event.target;\n    //getting hold of prevValue & returning an Object with prevValue and new Value:\n    setInput((prevValue) => {\n      return {\n        ...prevValue,\n        [name]: value,\n      };\n    });\n  };\n\n  return (\n    <div>\n      <form\n        onSubmit={(event) => {\n          //passing \"inputText\" value to \"addItem\" function:\n          props.onAdd(input);\n          event.preventDefault();\n          setInput({ title: \"\", content: \"\" });\n        }}\n      >\n        <input\n          onChange={handleChange}\n          name=\"title\"\n          placeholder=\"Title\"\n          value={input.title}\n        />\n        <textarea\n          onChange={handleChange}\n          name=\"content\"\n          placeholder=\"Take a note...\"\n          rows=\"3\"\n          value={input.content}\n        />\n        {props.error && <small style={{ color: \"red\" }}>{props.error}</small>}\n        <button type=\"submit\">Add</button>\n      </form>\n    </div>\n  );\n};\n\nexport default CreateArea;\n","import React, { useState, useEffect } from \"react\";\nimport Header from \"./components/Header\";\nimport Footer from \"./components/Footer\";\nimport Note from \"./components/Note\";\nimport CreateArea from \"./components/CreateArea\";\n\nconst App = () => {\n  // creating error state:\n  const [error, setError] = useState(null);\n  // creating state to save the input value to an array:\n  const [notes, setNotes] = useState([]);\n\n  // get notes from localStorage:\n  useEffect(() => {\n    const getNotes = JSON.parse(localStorage.getItem(\"notes\"));\n\n    if (getNotes) {\n      setNotes(getNotes);\n    }\n  }, []);\n\n  // save notes to localStorage:\n  useEffect(() => {\n    localStorage.setItem(\"notes\", JSON.stringify(notes));\n  }, [notes]);\n\n  // [1]getting hold of \"input\" value from \"CreateArea.js\" and [2]adding new notes to an array of notes with previous values:\n  const addNote = (input) => {\n    if (input.title.length < 3 && input.content.length < 3) {\n      setError(\"Please add either Title or Content ot save your note...\");\n      return false;\n    }\n    setNotes((prevNotes) => {\n      return [input, ...prevNotes];\n    });\n    setError(null);\n    console.log(input);\n  };\n\n  // [1]getting hold of \"onDelete\" prop and receiving \"id\" with it from \"Note.js\" [2]returning only prevNotes with index !== id:\n  const deleteNote = (id) => {\n    return setNotes((prevNotes) => {\n      if (window.confirm(\"Do you want to delete your note permanently?\")) {\n        return prevNotes.filter((note, index) => {\n          return index !== id;\n        });\n      }\n    });\n  };\n\n  return (\n    <div>\n      <Header />\n      <CreateArea onAdd={addNote} error={error} />\n\n      {\n        // mapping through the array of notes and adding new note to the list:\n        notes.map((note, index) => {\n          return (\n            <Note\n              key={index}\n              id={index}\n              title={note.title}\n              content={note.content}\n              onDelete={deleteNote}\n            />\n          );\n        })\n      }\n      <Footer />\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n//Challenge. Render all the notes inside notes.js as a seperate Note\n//component.\n"],"sourceRoot":""}